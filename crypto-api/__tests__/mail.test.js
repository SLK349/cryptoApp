// emailController.test.jsconst {sendWelcomeMail, sendPaymentMail} = require('../middleware/sendgrid');const sgMail = require('@sendgrid/mail');// Simuler @sendgrid/mailjest.mock('@sendgrid/mail', () => {    return {        setApiKey: jest.fn(),        send: jest.fn(() => Promise.resolve()),    };});//Describe Fonction qui permet de regrouper un ensemble de tests à une fonctionnalité spédescribe('sendWelcomeMail', () => {    //it Test individuel, premier param est un string qui décris le test, le second une fonction qui contient le code du test    it('should send a welcome email', async () => {        const to = 'test@example.com';        const name = 'John Doe';        await sendWelcomeMail(to, name);        expect(sgMail.send).toHaveBeenCalledWith({            to: to,            from: "assetly.management@gmail.com",            subject: "Bienvenue chez Assetly",            text: `Bonjour ${name}, bienvenue chez Assetly! Nous sommes ravis de vous avoir parmi nous. `,        });    });});describe('sendPaymentMail', () => {    it('should send a payment email', async () => {        const to = 'test@example.com';        const name = 'John Doe';        const productDate = '01/01/2024';        await sendPaymentMail(to, name, productDate);        expect(sgMail.send).toHaveBeenCalledWith({            to: to,            from: "assetly.management@gmail.com",            subject: "Assetly - Paiement effectué avec succes",            text: `Bonjour ${name}, votre paiement ${productDate} a été effectué avec succès. `,        });    });});